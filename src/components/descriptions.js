// #region Imports
import {
  TriggerBlockBreak,
  TriggerBlockPlace,
  TriggerCast,
  TriggerCleanup,
  TriggerCrouch,
  TriggerDeath,
  TriggerEnvironmentDamage,
  TriggerInitialize,
  TriggerKill,
  TriggerLand,
  TriggerLaunch,
  TriggerMove,
  TriggerPhysicalDamage,
  TriggerSkillDamage,
  TriggerTookPhysicalDamage,
  TriggerTookSkillDamage,
} from './triggers.js';

import {
  TargetArea,
  TargetCone,
  TargetLinear,
  TargetLocation,
  TargetNearest,
  TargetOffset,
  TargetRemember,
  TargetSelf,
  TargetSingle,
} from './targets.js';

import {
  ConditionArmor,
  ConditionAttribute,
  ConditionBiome,
  ConditionBlock,
  ConditionCeiling,
  ConditionChance,
  ConditionClass,
  ConditionClassLevel,
  ConditionCombat,
  ConditionCrouch,
  ConditionDirection,
  ConditionElevation,
  ConditionElse,
  ConditionEntityType,
  ConditionFire,
  ConditionFlag,
  ConditionGround,
  ConditionHealth,
  ConditionItem,
  ConditionInventory,
  ConditionLight,
  ConditionMana,
  ConditionName,
  ConditionOffhand,
  ConditionPermission,
  ConditionPotion,
  ConditionSkillLevel,
  ConditionSlot,
  ConditionStatus,
  ConditionTime,
  ConditionTool,
  ConditionValue,
  ConditionWater,
  ConditionWeather,
} from './conditions.js';

import {
  MechanicAttribute,
  MechanicBlock,
  MechanicBuff,
  MechanicCancel,
  MechanicCancelEffect,
  MechanicChannel,
  MechanicCleanse,
  MechanicCommand,
  MechanicCooldown,
  MechanicDamage,
  MechanicDamageBuff,
  MechanicDamageLore,
  MechanicDefenseBuff,
  MechanicDelay,
  MechanicDisguise,
  MechanicDurability,
  MechanicExplosion,
  MechanicFire,
  MechanicFlag,
  MechanicFlagClear,
  MechanicFlagToggle,
  MechanicFood,
  MechanicForgetTargets,
  MechanicHeal,
  MechanicHealthSet,
  MechanicHeldItem,
  MechanicImmunity,
  MechanicInterrupt,
  MechanicItem,
  MechanicItemProjectile,
  MechanicItemRemove,
  MechanicLaunch,
  MechanicLightning,
  MechanicMana,
  MechanicMessage,
  MechanicParticle,
  MechanicParticleAnimation,
  MechanicParticleEffect,
  MechanicParticleProjectile,
  MechanicPassive,
  MechanicPermission,
  MechanicPotion,
  MechanicPotionProjectile,
  MechanicProjectile,
  MechanicPurge,
  MechanicPush,
  MechanicRememberTargets,
  MechanicRepeat,
  MechanicSound,
  MechanicSpeed,
  MechanicStatus,
  MechanicTaunt,
  MechanicTrigger,
  MechanicValueAdd,
  MechanicValueAttribute,
  MechanicValueCopy,
  MechanicValueDistance,
  MechanicValueHealth,
  MechanicValueLocation,
  MechanicValueLore,
  MechanicValueLoreSlot,
  MechanicValueMana,
  MechanicValueMultiply,
  MechanicValuePlaceholder,
  MechanicValueRandom,
  MechanicValueSet,
  MechanicWarp,
  MechanicWarpLoc,
  MechanicWarpRandom,
  MechanicWarpSwap,
  MechanicWarpTarget,
  MechanicWarpValue,
  MechanicWolf,
  MechanicTest,
} from './mechanics.js';
// #endregion

class ComponentDesc {
  constructor(name, container, constructor, category = 'Default', premium = false) {
    this.name = name;
    this.container = container;
    this.constructor = constructor; // We will call this to create a new instance of the component
    this.category = category;
    this.premium = premium;
  }
}

// Helps with creating component descriptions
const _ = (name, container, constructor, category, premium) =>
  new ComponentDesc(name, container, constructor, category, premium);

/**
 * Available triggers for activating skill effects
 */
// prettier-ignore
const Trigger = {
    BLOCK_BREAK          : _( 'Block Break',          true, TriggerBlockBreak,        'Block',  true ),
    BLOCK_PLACE          : _( 'Block Place',          true, TriggerBlockPlace,        'Block',  true ),
    CAST                 : _( 'Cast',                 true, TriggerCast,              'General'               ),
    CLEANUP              : _( 'Cleanup',              true, TriggerCleanup,           'API'                   ),
    CROUCH               : _( 'Crouch',               true, TriggerCrouch,            'General'               ),
    DEATH                : _( 'Death',                true, TriggerDeath,             'General'               ),
    ENVIRONMENT_DAMAGE   : _( 'Environment Damage',   true, TriggerEnvironmentDamage, 'Damage', true ),
    INITIALIZE           : _( 'Initialize',           true, TriggerInitialize,        'API'                   ),
    KILL                 : _( 'Kill',                 true, TriggerKill,              'General'               ),
    LAND                 : _( 'Land',                 true, TriggerLand,              'General'               ),
    LAUNCH               : _( 'Launch',               true, TriggerLaunch,            'General'               ),
    MOVE                 : _( 'Move',                 true, TriggerMove,              'General',true ),
    PHYSICAL_DAMAGE      : _( 'Physical Damage',      true, TriggerPhysicalDamage,    'Damage'                ),
    SKILL_DAMAGE         : _( 'Skill Damage',         true, TriggerSkillDamage,       'Damage'                ),
    TOOK_PHYSICAL_DAMAGE : _( 'Took Physical Damage', true, TriggerTookPhysicalDamage,'Damage'                ),
    TOOK_SKILL_DAMAGE    : _( 'Took Skill Damage',    true, TriggerTookSkillDamage,   'Damage'                )
  };

/**
 * Available target component data
 */
// prettier-ignore
const Target = {
    AREA     : _( 'Area',     true, TargetArea,     null ),
    CONE     : _( 'Cone',     true, TargetCone,     null ),
    LINEAR   : _( 'Linear',   true, TargetLinear,   null ),
    LOCATION : _( 'Location', true, TargetLocation, null ),
    NEAREST  : _( 'Nearest',  true, TargetNearest,  null ),
    OFFSET   : _( 'Offset',   true, TargetOffset,   null ),
    REMEMBER : _( 'Remember', true, TargetRemember, null ),
    SELF     : _( 'Self',     true, TargetSelf,     null ),
    SINGLE   : _( 'Single',   true, TargetSingle,   null )
  };

/**
 * Available condition component data
 */
// prettier-ignore
const Condition = {
    ARMOR:       _( 'Armor',       true, ConditionArmor,      null ),
    ATTRIBUTE:   _( 'Attribute',   true, ConditionAttribute,  null ),
    BIOME:       _( 'Biome',       true, ConditionBiome,      null ),
    BLOCK:       _( 'Block',       true, ConditionBlock,      null ),
    CEILING:     _( 'Ceiling',     true, ConditionCeiling,    null, true ),
    CHANCE:      _( 'Chance',      true, ConditionChance,     null ),
    CLASS:       _( 'Class',       true, ConditionClass,      null ),
    CLASS_LEVEL: _( 'Class Level', true, ConditionClassLevel, null ),
    COMBAT:      _( 'Combat',      true, ConditionCombat,     null ),
    CROUCH:      _( 'Crouch',      true, ConditionCrouch,     null ),
    DIRECTION:   _( 'Direction',   true, ConditionDirection,  null ),
    ELEVATION:   _( 'Elevation',   true, ConditionElevation,  null ),
    ELSE:        _( 'Else',        true, ConditionElse,       null, true ),
    ENTITY_TYPE: _( 'Entity Type', true, ConditionEntityType, null, true ),
    FIRE:        _( 'Fire',        true, ConditionFire,       null ),
    FLAG:        _( 'Flag',        true, ConditionFlag,       null ),
    GROUND:      _( 'Ground',      true, ConditionGround,     null, true ),
    HEALTH:      _( 'Health',      true, ConditionHealth,     null ),
    INVENTORY:   _( 'Inventory',   true, ConditionInventory,  null ),
    ITEM:        _( 'Item',        true, ConditionItem,       null ),
    LIGHT:       _( 'Light',       true, ConditionLight,      null ),
    MANA:        _( 'Mana',        true, ConditionMana,       null ),
    NAME:        _( 'Name',        true, ConditionName,       null ),
    OFFHAND:     _( 'Offhand',     true, ConditionOffhand,    null ),
    PERMISSION:  _( 'Permission',  true, ConditionPermission, null, true ),
    POTION:      _( 'Potion',      true, ConditionPotion,     null ),
    SKILL_LEVEL: _( 'Skill Level', true, ConditionSkillLevel, null ),
    SLOT:        _( 'Slot',        true, ConditionSlot,       null, true ),
    STATUS:      _( 'Status',      true, ConditionStatus,     null ),
    TIME:        _( 'Time',        true, ConditionTime,       null ),
    TOOL:        _( 'Tool',        true, ConditionTool,       null ),
    VALUE:       _( 'Value',       true, ConditionValue,      null ),
    WATER:       _( 'Water',       true, ConditionWater,      null ),
    WEATHER:     _( 'Weather',     true, ConditionWeather,    null, true )
  };

/**
 * Available mechanic component data
 */
// prettier-ignore
const Mechanic = {
    ATTRIBUTE:           _('Attribute',           false, MechanicAttribute,          'Stat Modifiers'),
    BLOCK:               _('Block',               false, MechanicBlock,              'Effects'),
    BUFF:                _('Buff',                false, MechanicBuff,               'Stat Modifiers', true),
    CANCEL:              _('Cancel',              false, MechanicCancel,             'API'),
    CHANNEL:             _('Channel',             true,  MechanicChannel,            'Status'),
    CLEANSE:             _('Cleanse',             false, MechanicCleanse,            'Status'),
    COMMAND:             _('Command',             false, MechanicCommand,            'API'),
    COOLDOWN:            _('Cooldown',            false, MechanicCooldown,           'API'),
    DAMAGE:              _('Damage',              false, MechanicDamage,             'Damage'),
    DAMAGE_BUFF:         _('Damage Buff',         false, MechanicDamageBuff,         'Stat Modifiers'),
    DAMAGE_LORE:         _('Damage Lore',         false, MechanicDamageLore,         'Damage'),
    DEFENSE_BUFF:        _('Defense Buff',        false, MechanicDefenseBuff,        'Stat Modifiers'),
    DELAY:               _('Delay',               true,  MechanicDelay,              'API'),
    DISGUISE:            _('Disguise',            false, MechanicDisguise,           'Effects'),
    DURABILITY:          _('Durability',          false, MechanicDurability,         'Item', true),
    EXPLOSION:           _('Explosion',           false, MechanicExplosion,          'Effects'),
    FIRE:                _('Fire',                false, MechanicFire,               'Status Control'),
    FLAG:                _('Flag',                false, MechanicFlag,               'Flag'),
    FLAG_CLEAR:          _('Flag Clear',          false, MechanicFlagClear,          'Flag'),
    FLAG_TOGGLE:         _('Flag Toggle',         false, MechanicFlagToggle,         'Flag'),
    FOOD:                _('Food',                false, MechanicFood,               'Resource Management', true),
    FORGET_TARGETS:      _('Forget Targets',      false, MechanicForgetTargets,      'Variable Control', true),
    HEAL:                _('Heal',                false, MechanicHeal,               'Stat Modifiers'),
    HEALTH_SET:          _('Health Set',          false, MechanicHealthSet,          'Stat Modifiers', true),
    HELD_ITEM:           _('Held Item',           false, MechanicHeldItem,           'Item', true),
    IMMUNITY:            _('Immunity',            false, MechanicImmunity,           'Stat Modifiers'),
    INTERRUPT:           _('Interrupt',           false, MechanicInterrupt,          'Status Control'),
    ITEM:                _('Item',                false, MechanicItem,               'API'),
    ITEM_PROJECTILE:     _('Item Projectile',     true,  MechanicItemProjectile,     'Projectile'),
    ITEM_REMOVE:         _('Item Remove',         false, MechanicItemRemove,         'Item'),
    LAUNCH:              _('Launch',              false, MechanicLaunch,             'Movement'),
    LIGHTNING:           _('Lightning',           false, MechanicLightning,          'Effects'),
    MANA:                _('Mana',                false, MechanicMana,               'Resource Management'),
    MESSAGE:             _('Message',             false, MechanicMessage,            'API'),
    PARTICLE:            _('Particle',            false, MechanicParticle,           'Effects'),
    PARTICLE_ANIMATION:  _('Particle Animation',  false, MechanicParticleAnimation,  'Effects'),
    PARTICLE_EFFECT:     _('Particle Effect',     false, MechanicParticleEffect,     'Effects', true),
    CANCEL_EFFECT:       _('Cancel Effect',       false, MechanicCancelEffect,       'Effects', true),
    PARTICLE_PROJECTILE: _('Particle Projectile', true,  MechanicParticleProjectile, 'Projectile'),
    PASSIVE:             _('Passive',             true,  MechanicPassive,            'API'),
    PERMISSION:          _('Permission',          false, MechanicPermission,         'API'),
    POTION:              _('Potion',              false, MechanicPotion,             'Stat Modifiers'),
    POTION_PROJECTILE:   _('Potion Projectile',   true,  MechanicPotionProjectile,   'Projectile'),
    PROJECTILE:          _('Projectile',          true,  MechanicProjectile,         'Projectile'),
    PURGE:               _('Purge',               false, MechanicPurge,              'Status Control'),
    PUSH:                _('Push',                false, MechanicPush,               'Movement'),
    REMEMBER_TARGETS:    _('Remember Targets',    false, MechanicRememberTargets,    'Variable Control'),
    REPEAT:              _('Repeat',              true,  MechanicRepeat,             'API'),
    SOUND:               _('Sound',               false, MechanicSound,              'Effects'),
    SPEED:               _('Speed',               false, MechanicSpeed,              'Stat Modifiers'),
    STATUS:              _('Status',              false, MechanicStatus,             'Status Control'),
    TAUNT:               _('Taunt',               false, MechanicTaunt,              'Stat Modifiers'),
    TRIGGER:             _('Trigger',             true,  MechanicTrigger,            'API', true),
    VALUE_ADD:           _('Value Add',           false, MechanicValueAdd,           'Variable Control'),
    VALUE_ATTRIBUTE:     _('Value Attribute',     false, MechanicValueAttribute,     'Variable Control'),
    VALUE_COPY:          _('Value Copy',          false, MechanicValueCopy,          'Variable Control', true),
    VALUE_DISTANCE:      _('Value Distance',      false, MechanicValueDistance,      'Variable Control', true),
    VALUE_HEALTH:        _('Value Health',        false, MechanicValueHealth,        'Variable Control', true),
    VALUE_LOCATION:      _('Value Location',      false, MechanicValueLocation,      'Variable Control'),
    VALUE_LORE:          _('Value Lore',          false, MechanicValueLore,          'Variable Control'),
    VALUE_LORE_SLOT:     _('Value Lore Slot',     false, MechanicValueLoreSlot,      'Variable Control', true),
    VALUE_MANA:          _('Value Mana',          false, MechanicValueMana,          'Variable Control', true),
    VALUE_MULTIPLY:      _('Value Multiply',      false, MechanicValueMultiply,      'Variable Control'),
    VALUE_PLACEHOLDER:   _('Value Placeholder',   false, MechanicValuePlaceholder,   'Variable Control', true),
    VALUE_RANDOM:        _('Value Random',        false, MechanicValueRandom,        'Variable Control'),
    VALUE_SET:           _('Value Set',           false, MechanicValueSet,           'Variable Control'),
    WARP:                _('Warp',                false, MechanicWarp,               'Movement'),
    WARP_LOC:            _('Warp Location',       false, MechanicWarpLoc,            'Movement'),
    WARP_RANDOM:         _('Warp Random',         false, MechanicWarpRandom,         'Movement'),
    WARP_SWAP:           _('Warp Swap',           false, MechanicWarpSwap,           'Movement'),
    WARP_TARGET:         _('Warp Target',         false, MechanicWarpTarget,         'Movement'),
    WARP_VALUE:          _('Warp Value',          false, MechanicWarpValue,          'Movement'),
    WOLF:                _('Wolf',                true,  MechanicWolf,               'API'),
    TEST:                _('Test',                false, MechanicTest,               'Misc')
  };

export { Trigger, Target, Condition, Mechanic };
